name: API builder
on: [ push, pull_request ]

env:
  DOCKER_IMAGE: ghcr.io/rassafel/todo-api
  CI: true

jobs:
  gradleValidation:
    name: Gradle Wrapper
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v2

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

  gradleTest:
    name: Gradle run tests
    needs: gradleValidation
    runs-on: ubuntu-latest
    container: gradle:jdk18-jammy
    steps:
      - name: Fetch sources
        uses: actions/checkout@v2

      - name: Setup Gradle dependencies cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}

      - name: Setup Gradle wrapper cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: Run tests
        run: ./api/gradlew -p api/ test --no-daemon --stacktrace

  gradleIntegrationTest:
    name: Gradle run integration tests
    needs: gradleTest
    runs-on: ubuntu-latest
    container: gradle:jdk18-jammy
    steps:
      - name: Fetch sources
        uses: actions/checkout@v2

      - name: Setup Gradle dependencies cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}

      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: Run integration tests
        run: ./api/gradlew -p api/ integrationTest --no-daemon --stacktrace

  gradleBuild:
    name: Gradle run integration tests
    needs: gradleIntegrationTest
    runs-on: ubuntu-latest
    container: gradle:jdk18-jammy
    steps:
      - name: Fetch sources
        uses: actions/checkout@v2

      - name: Setup Gradle dependencies cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle.kts') }}

      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: Run integration tests
        run: ./api/gradlew -p api/ assemble --no-daemon --stacktrace


  gradle-build:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v2
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Run assemble
        run: ./api/gradlew -p api/ assemble --no-daemon --stacktrace

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build_artifacts
          path: api/build/libs

      - name: Run test
        run: ./api/gradlew -p api/ test --no-daemon --stacktrace

      - name: Archive test report
        uses: actions/upload-artifact@v2
        with:
          name: Test report
          path: api/build/reports/tests/test

      - name: Run integration test
        run: ./api/gradlew -p api/ integrationTest --no-daemon --stacktrace

      - name: Archive integration test report
        uses: actions/upload-artifact@v2
        with:
          name: Integration test report
          path: api/build/reports/tests/integrationTest

  docker-build:
    runs-on: ubuntu-latest
    needs:
      - gradle-build
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: build_artifacts
          path: api/build/libs

      - name: Prepare image tags
        id: prep
        run: |
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          TAGS="${DOCKER_IMAGE}:${GITHUB_SHA}"
          TAGS="$TAGS,${DOCKER_IMAGE}:${GITHUB_REF#refs/heads/}-latest"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to ghcr
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: api
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
