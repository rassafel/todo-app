plugins {
    id 'idea'
    id 'java'
    id 'groovy'
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
}

group 'ru.rassafel'

repositories {
    mavenCentral()
}

bootJar {
    archiveClassifier = 'boot'
}

jar {
    archiveClassifier = ''
}

sourceSets {
    integration {
        groovy.srcDir "$projectDir/src/integration/groovy"
        java.srcDir "$projectDir/src/integration/java"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2021.0.3'
        mavenBom 'io.awspring.cloud:spring-cloud-aws-dependencies:2.4.2'
        mavenBom 'org.codehaus.groovy:groovy-bom:3.0.12'
        mavenBom 'org.spockframework:spock-bom:2.2-groovy-3.0'
    }
}

configurations {
    compileOnly.extendsFrom annotationProcessor
    testCompileOnly.extendsFrom compileOnly
    testAnnotationProcessor.extendsFrom testCompileOnly

    integrationCompileOnly.extendsFrom testCompileOnly
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
}

dependencies {
//    implementation 'io.awspring.cloud:spring-cloud-starter-aws'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.liquibase:liquibase-core'

//    implementation 'org.postgresql:postgresql'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.codehaus.groovy:groovy'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.spockframework:spock-core'
}



tasks.register('integrationTest', Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn integrationTest

tasks.withType(Test) {
    useJUnitPlatform()
}
